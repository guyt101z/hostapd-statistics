#!/bin/bash
loadcfg() {
#Defaults
wlandev="wlan0"
sleeptime="5m"
webinterfaceport="1500"
dhcpserverip="192.168.178.1" #todo: automate this
arp_scan_dev="br0"
use_sensors="0"
use_vnstat="0"
log="1"
client_history="1"

SCRIPT_FILE=$( readlink -f "${BASH_SOURCE[0]}" )
SCRIPT_DIR="${SCRIPT_FILE%/*}"
source "/etc/hostapd-statistics/CONFIG"
}
loadcfg # Load config or defaults

timeoutcheck() {
# Remove zombie clients
iwline=`iw dev "$wlandev" station dump | tr [:lower:] [:upper:]` # Less load
while read -r line
do
	mac=`echo "$line" | cut -d";" -f2 | tr [:lower:] [:upper:]` # Get the mac of the current line
	iwcheck=`echo "$iwline" |grep -i "$mac"`  # Check if that mac is still connected
	if [ -z "$iwcheck" ]; then # if not
		sed -i -e "/$mac/d" "/dev/shm/conclients" # Remove the line with $mac from conclients
		if  (( ${log} == 1 )); then
			echo "$mac timed out."
		fi
	fi
done < "/dev/shm/conclients"

# For whatever reason, hostapd doesn't always notify us of new devices
# This is pretty ugly
rescandevices=`iw dev "$wlandev" station dump | sed -e "s/Station/;/g" | grep ";" | cut -d" " -f2`
for item in $rescandevices
do
	mac=`echo $item | tr [:lower:] [:upper:]`
	if  (( ${client_history} == 1 )); then
		unique
	fi
	#check if the mac is already in our list of connected clients
	alreadythere=`grep $mac "/dev/shm/conclients"`
	if [ -z "$alreadythere" ]; then
		iplookup
		hostname=`nslookup "$ip" | grep "name" | cut -d"=" -f2 | tr -d ' '` 
		time=`date +"%H:%M"`
		shortmac=`echo $mac | cut -c1-8`
		vendor=`cat /etc/hostapd-statistics/mac2vendor | grep $shortmac | cut -d";" -f2 | tr -d '\n'`
		write="$vendor;$mac;$ip;$hostname;$time"
		if  (( ${log} == 1 )); then
			echo "Client $mac added. Hostapd didn't notify us about that one. Wat?"
		fi
		echo "$write" >> "/dev/shm/conclients"
	fi
done	
}

timeoutcheck_loop() { 
# Endless loop
sleep "$sleeptime"
timeoutcheck
while sleep "$sleeptime"
do 
	timeoutcheck 
done
}

disconnect() {
	mac=`echo $disconnected | cut -d" " -f8 | tr [:lower:] [:upper:]`
	sed -i -e "/$mac/d" "/dev/shm/conclients"
	if  (( ${log} == 1 )); then
		echo "$mac removed from connected clients."
	fi
}
connect () {
	mac=`echo $connected | cut -d" " -f8 | tr [:lower:] [:upper:]`
	if  (( ${client_history} == 1 )); then
		unique
	fi
	#check if the mac is already in our list of connected clients
	alreadythere=`grep $mac "/dev/shm/conclients"`
	if [ -z "$alreadythere" ]; then
		iplookup
		hostname=`nslookup "$ip" | grep "name" | cut -d"=" -f2 | tr -d ' '` 
		time=`date +"%H:%M"`
		shortmac=`echo $mac | cut -c1-8`
		vendor=`cat /etc/hostapd-statistics/mac2vendor | grep $shortmac | cut -d";" -f2 | tr -d '\n'`
		write="$vendor;$mac;$ip;$hostname;$time"
		if  (( ${log} == 1 )); then
			echo "Client $mac added."
		fi
		echo "$write" >> "/dev/shm/conclients"
	fi

}
unique() {
	if ! grep -q "$mac" "/etc/hostapd-statistics/uniquemacs" ; then
		echo "$mac" >> "/etc/hostapd-statistics/uniquemacs"
		if  (( ${log} == 1 )); then
			echo "New device connected. Mac: $mac"
		fi
	fi
}
iplookup() {
	#MAC to IP resolution
	ip=`grep "$mac" /proc/net/arp | cut -d" " -f1`
	#for devices like my sgs2: find out the ip with arp-scan or nmap since it doesn't appear in the arp cache
	trys=0
	if [ -z "$ip" ]; then
		arp-scanlookup
	fi
	arp-scanfailcheck
}
nmaplookup() {
	ip=`nmap -sP "${dhcpserverip}"/24 | sed -n '/Nmap scan report for/{s/.* //;s/[)(]//g;h};/'"$mac"'/{x;p;q;}'` #thank you sluggr 	##sed on freenode
}
arp-scanlookup() {

	ip=`arp-scan -l -I "$arp_scan_dev" | grep -i "$mac" | head -n1 |grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'`
}
failcheck() {
	if [ -z "$ip" ]; then
		trys=$((trys+1))
		if (( trys < 3 )); then

			nmaplookup
			failcheck
		else
			if  (( ${log} == 1 )); then
				echo "Looks like $mac disappeared from the network."
			fi
			exit 0
		fi
	fi


}
arp-scanfailcheck() {
	if [ -z "$ip" ]; then
		trys=$((trys+1))
		if (( trys < 3 )); then
			arp-scanlookup
			arp-scanfailcheck
		else
			trys=0
			nmaplookup
			failcheck
	fi
fi


}
tablecontentgen() {
iwresult=`iw dev "$wlandev" station dump | tr "\n" "%" | sed "s/Station/;/g" | tr ";" "\n"`
while read -r line # cycle through all lines in conclients (flatfile ftw!) and parse the values so they fit into our html page
do
	
	echo "<tr>"
	a="<td> $line"
	b=`echo "$a" | sed "s/;/ <\/td><td> /g"`
	encoded="$b </td>"
	echo "$encoded"
	mac=`echo "$line" | cut -d";" -f2`
	iwstationdump=`echo $iwresult | grep -i "$mac"`
	if [ -z "$iwstationdump" ]; then
		echo "<td style=\"background-color:#ff0c05;\">"
		echo "CONNECTION"
		echo "</td>"
		echo "<td style=\"background-color:#ff0c05;\">"
		echo "LOST"
		echo "</td>"
		echo "<td style=\"background-color:#ff0c05;\">"
		echo "CONNECTION"
		echo "</td>"
		echo "<td style=\"background-color:#ff0c05;\">"
		echo "LOST"
		echo "</td>"
		echo "<td style=\"background-color:#ff0c05;\">"
		echo "CONNECTION"
		echo "</td>"
		echo "<td style=\"background-color:#ff0c05;\">"
		echo "LOST"
		echo "</td>"
	else
		#timeout
		echo "<td>"
		echo "$iwstationdump" | cut -d"%" -f2 | cut -d":" -f2
		echo "</td>"
		#send
		echo "<td>"
		tmp=`echo "$iwstationdump" | cut -d"%" -f3 | cut -d":" -f2`
		if [ -n "$tmp" ]; then
			echo "$(($tmp/1048576)) MB"
		fi
		echo "</td>"
		#recieved
		echo "<td>"
		tmp=`echo "$iwstationdump" | cut -d"%" -f5 | cut -d":" -f2`
		if [ -n "$tmp" ]; then
			echo "$(($tmp/1048576)) MB"
		fi
		echo "</td>"
		#signal
		echo "<td>"
			value=`echo "$iwstationdump" | cut -d"%" -f9 | cut -d":" -f2 | tr -d " "`
			value2=`echo $value | sed -e 's/-\(.*\)dBm/\1/'`
			if [ "$value2" -lt 61 ]
			then
				color="#008a00"
			elif [ "$value2" -lt 81 ]
			then
				color="#ffcb00"
			else
				color="#ff0c05"
			fi
			echo "<font color=\"$color\">$value</font>"
		echo "</td>"
		#signal avg
		echo "<td>"
			value=`echo "$iwstationdump" | cut -d"%" -f10 | cut -d":" -f2 | tr -d " "`
			value2=`echo $value | sed -e 's/-\(.*\)dBm/\1/'`
			if [ "$value2" -lt 61 ]
			then
				color="#008a00"
			elif [ "$value2" -lt 81 ]
			then
				color="#ffcb00"
			else
				color="#ff0c05"
			fi
			echo "<font color=\"$color\">$value</font>"
		echo "</td>"
		#Bandwith
		echo "<td>"
		echo "$iwstationdump" | cut -d"%" -f11 | cut -d":" -f2 | tr -d " "
		echo "</td>"
		echo "</tr>"
	fi
done < "/dev/shm/conclients"
}
refreshtablefunction() {
	uptime #Todo: beautify this.
	echo '<table>'
	echo "<tr>"
	echo "<th>VENDOR</th>"
	echo "<th>MAC</th>"
	echo "<th>IP</th>"
	echo "<th>HOSTNAME</th>"
	echo "<th>Con. since</th>"
	echo "<th>Inactive Time</th>"
	echo "<th>Send</th>"
	echo "<th>Recieved</th>"
	echo "<th>Signal</th>"
	echo "<th>Signal Avg.</th>"
	echo "<th>Bandwidth</th>"
	echo "</tr>"
	tablecontentgen
	echo "</table>"
	echo "<br>"
	if  (( ${use_sensors} == 1 )); then
	# A new table for our temperature values
		echo "<table>"
		echo "<tr>"
		echo "<th>Sensor</th>"
		echo "<th>T (&deg;C)</th>"
		echo "</tr>"
		LANG=C LC_ALL=C sensors -A | sed -nr -e 's,^(.*+)[:]\s+[+]?([0-9.]+).C.*$,<tr><td>\1</td><td>\2</td></tr>,p' #thanks dywi
		echo "</table>"
	fi
#	exit 0
}
refreshvnstatifunction() {
if  (( ${use_vnstat} == 1 )); then
		# Generate the vnstat images with vnstati
		s=`vnstati -i eth0 -s -o /dev/stdout | base64`
		h=`vnstati -i eth0 -h -o /dev/stdout | base64`
		d=`vnstati -i eth0 -d -o /dev/stdout | base64`
		t=`vnstati -i eth0 -t -o /dev/stdout | base64`
		m=`vnstati -i eth0 -m -o /dev/stdout | base64`
		echo "<br>"
		#Embed the images
		echo "<img src='data:image/png;base64,$s'>"
		echo "<img src='data:image/png;base64,$h'>"
		echo "<br>"
		echo "<img src='data:image/png;base64,$d'>"
		echo "<img src='data:image/png;base64,$m'>"
		echo "<br>"
		echo "<img src='data:image/png;base64,$t'>"
	fi
#	exit 0
}


#core functions
main() {
	if  (( ${log} == 1 )); then
		echo "Hostapd-statistics launched"
	fi
	# Remove all old entrys and create the file if it doesn't exist.
	> "/dev/shm/conclients"
	# Launch the Webinterface listener.
	socat TCP4-LISTEN:"$webinterfaceport",fork,reuseaddr EXEC:"bash /usr/bin/hostapd-statistics web" 2>1 >>/var/log/hostapd-statistics &
	echo $! > /var/run/hostapd-statistics.1.pid
	# Run the infinite loop
	timeoutcheck_loop &
	readonly TIMEOUTCHECK_PID=$!
	echo $TIMEOUTCHECK_PID > /var/run/hostapd-statistics.2.pid
	trap "kill ${TIMEOUTCHECK_PID}; rm /dev/shm/conclients " TERM EXIT
	if  (( ${log} == 1 )); then
		echo "Adding devices which are already connected.."
	fi
	initialdevices=`iw dev "$wlandev" station dump | sed -e "s/Station/;/g" | grep ";" | cut -d" " -f2`
	for item in $initialdevices
	do
		mac=`echo $item | tr [:lower:] [:upper:]`
		if  (( ${client_history} == 1 )); then
			unique
		fi
		iplookup
		hostname=`nslookup "$ip" | grep "name" | cut -d"=" -f2 | tr -d ' '` 
		time=`date +"%H:%M"`
		shortmac=`echo $mac | cut -c1-8`
                vendor=`cat /etc/hostapd-statistics/mac2vendor | grep $shortmac | cut -d";" -f2 | tr -d '\n'`
		write="$vendor;$mac;$ip;$hostname;$time"
		if  (( ${log} == 1 )); then
			echo "Client $mac added."
		fi
		echo "$write" >> "/dev/shm/conclients"
	done 
	
	# Watch for new Syslog entrys by hostapd
	while :
	do
		inotifywait -q -q -e modify /var/log/syslog && bash /usr/bin/hostapd-statistics core
	done
}




core() {
	isthisimportant=`tail -1 /var/log/syslog | grep "hostapd"`
	if [ -n "$isthisimportant" ]; then
		connected=`echo "$isthisimportant" | grep "handshake"`
		disconnected=`echo "$isthisimportant" | grep "deauthenticated"`
		if [ -n "$connected" ]; then
			connect
		elif [ -n "$disconnected" ]; then
			disconnect
		fi
	
	fi
}

web() {
#Headersnstuff
read request
request=`echo $request | cut -d" " -f2`
echo -e "HTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\n"
# Everything
case  "$request"  in
		"/refreshtable")
		refreshtablefunction
		;;
		"/refreshvnstati")
		refreshvnstatifunction
		;;
		*)
		echo "<!DOCTYPE html>"
		echo "<html>"
		cat "/etc/hostapd-statistics/javascript1.js"
		echo "<style type='text/css'>"
		cat "/etc/hostapd-statistics/style.css"
		echo "</style>"
		echo "<head>"
		echo "<title>Hostapd-statistics</title>"
		echo "</head>"
		echo "<body>"
		echo "<center><h1>Hostapd-statistics</h1>"
		echo "<div id='tableHolder'></div>"
		echo "<script>"
		echo "refreshMainTable();"
#		echo "refreshVnstati();"
		echo "</script>"
#		echo "<div id='VnstatiHolder'></div>"
		refreshvnstatifunction

		echo "<br>"
		echo "</center>"
		#the end
		echo "</body>"
		echo "</html>"
		
		;;
esac
}

#main class like stuff
case  "$1"  in
		"web")
		web
		;;
		"core")
		core
		;;
		*)       
		main
		;;
esac



