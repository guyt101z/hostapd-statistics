#!/bin/bash
#This script simply waits for stuff from Hostapd to appear in the syslog
# uncomment to debug
#set -x
loadcfg() {
#if we got no conf file define everything here.
wlandev="wlan0"
sleeptime="5m"
webinterfaceport="1500"
dhcpserverip="192.168.178.1"
arp_scan_dev="br0"
use_sensors="0"
use_vnstat="0"
webradio="0"
webradio_url="http://main-high.rautemusik.fm"

SCRIPT_FILE=$( readlink -f "${BASH_SOURCE[0]}" )
SCRIPT_DIR="${SCRIPT_FILE%/*}"
source "/etc/hostapd-statistics/CONFIG"
}
loadcfg
timeoutcheck() {
# This function removes devices which aren't connected anymore but also don't disconnect properly.
# It uses the iw tool to dump all connected clients.
while read -r line
do
	mac=`echo "$line" | cut -d";" -f1 | tr [:lower:] [:upper:]`
	iwcheck=`iw dev "$wlandev" station dump | grep -i "$mac"` 
	if [ -z "$iwcheck" ]; then
		sed -i -e "/$mac/d" "/dev/shm/conclients" #remove the line with $mac from conclients
		echo "$mac timed out."
	fi
done < "/dev/shm/conclients"
}
timeoutcheck_loop() { timeoutcheck; while sleep "$sleeptime"; do timeoutcheck; done; }
echo "Hostapd-statistics launched"
# Remove all old entrys and create the file if it doesn't exist.
> "/dev/shm/conclients"
# Launch the webinterface listener. In comparison to netcat, this method runs web.sh only at access and not as soon as netcat is startet.
socat TCP4-LISTEN:"$webinterfaceport",fork,reuseaddr EXEC:"bash /usr/bin/hostapd-statistics/web.sh" & 
# Run the infinite loop
timeoutcheck_loop &
readonly TIMEOUTCHECK_PID=$!
trap "kill ${TIMEOUTCHECK_PID}; rm '/dev/shm/hostapd_statistics_webradio.pid' > /dev/null 2>&1; rm /dev/shm/conclients " TERM EXIT

#functions from core.sh to do some stuff

unique() {
if ! grep -q "$mac" "/etc/hostapd-statistics/uniquemacs" ; then
	echo "$mac" >> "/etc/hostapd-statistics/uniquemacs"
	echo "New device connected. Mac: $mac"
fi
}
iplookup() {
#Find out the corresponding IP to the mac adress
ip=`grep "$mac" /proc/net/arp | cut -d" " -f1`
#for devices like my sgs2: find out the ip with arp-scan or nmap since it doesn't appear in the arp cache
trys=0
if [ -z "$ip" ]; then
	arp-scanlookup
fi
arp-scanfailcheck
}
nmaplookup() {
echo "IP lookup with nmap.."
ip=`nmap -sP "${dhcpserverip}"/24 | sed -n '/Nmap scan report for/{s/.* //;s/[)(]//g;h};/'"$mac"'/{x;p;q;}'` #thank you sluggr ##sed on freenode
}
arp-scanlookup() {
echo "IP lookup with arp-scan.."
ip=`arp-scan -l -I "$arp_scan_dev" | grep -i "$mac" | head -n1 |grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'`
}
failcheck() {
if [ -z "$ip" ]; then
	trys=$((trys+1))
	if (( trys < 3 )); then
		echo "Whoops, nmap ip lookup failed. Try again.."
		nmaplookup
		failcheck
	else
		echo "Looks like $mac disappeared from the network."
		exit 0
	fi
fi


}
arp-scanfailcheck() {
if [ -z "$ip" ]; then
	trys=$((trys+1))
	if (( trys < 3 )); then
		echo "Whoops, arp-scan ip lookup failed. Try again.."
		arp-scanlookup
		arp-scanfailcheck
	else
		trys=0
		echo "Okay.. lets try nmap."
		nmaplookup
		failcheck
	fi
fi


}
echo "Adding devices which are already connected.."
initialdevices=`iw dev "$wlandev" station dump | sed -e "s/Station/;/g" | grep ";" | cut -d" " -f2`
for item in $initialdevices
do
		mac=`echo $item | tr [:lower:] [:upper:]`
		unique
		iplookup
		hostname=`nslookup "$ip" | grep "name" | cut -d"=" -f2 | tr -d ' '` 
		time=`date +"%H:%M"`
		write="$mac;$ip;$hostname;$time"
		echo "Client $mac added."
		echo "$write" >> "/dev/shm/conclients"
done 

# The whole watch the syslog thingy
while :
do
	inotifywait -q -q -e modify /var/log/syslog && bash "/usr/bin/hostapd-statistics/core.sh"
done

